import {LitElement} from 'lit-element';

export {ApiExampleGenerator};

declare class ApiExampleGenerator extends LitElement {
  readonly ns: any;
  amf: any;
  constructor();
  _getAmfKey(k: any): any;
  _ensureArray(k: any): any;
  _resolve(k: any): any;
  _hasType(k: any, v: any): any;
  listMedia(payloads: any): any;
  generatePayloadsExamples(payloads: any, media: any, opts?: any): any;
  generatePayloadExamples(payload: any, mime: any, opts?: any): any;
  computeExamples(schema: any, mime: any, opts?: any): any;
  _readJsonSchema(schema: any): any;
  _computeFromExamples(examples: any, mime: any, opts: any): any;
  _processExamples(examples: any): any;
  _listTypeExamples(examples: any, typeId: any): any;
  _generateFromExample(example: any, mime: any, opts: any): any;
  _computeExampleArrayShape(schema: any, mime: any, opts: any): any;
  _processJsonArrayExamples(examples: any): any;
  _computeUnionExamples(schema: any, mime: any, opts: any): any;
  _computeScalarType(shape: any): any;
  _jsonFromStructure(structure: any): any;
  _jsonFromStructureValue(value: any, obj: any, isArray: any, key: any, resolvedPrefix: any): any;
  _xmlFromStructure(structure: any, opts: any): any;
  formatXml(xml: any): any;
  _getTypedValue(structure: any): any;
  _exampleFromJsonSchema(schema: any, jsonSchema: any): any;
  _exampleFromProperties(properties: any, mime: any, typeName: any, parentType: any): any;
  _jsonExampleFromProperties(properties: any): any;
  _computeJsonPropertyValue(range: any, typeName: any): any;
  _typeToValue(value: any, type: any): any;
  _computeJsonUnionValue(range: any, typeName: any): any;
  _computeJsonObjectValue(range: any): any;
  _computeJsonArrayValue(range: any): any;
  _extractExampleRawValue(example: any): any;
  _getTypeScalarValue(range: any): any;
  _xmlExampleFromProperties(properties: any, typeName: any, parentType: any): any;
  _xmlProcessProperty(doc: any, node: any, property: any): any;
  _xmlFromExamples(doc: any, node: any, example: any, propertyName: any): any;
  _readDataType(shape: any): any;
  _appendXmlAttribute(node: any, property: any, range: any, serialization: any): any;
  _appendXmlElement(doc: any, node: any, range: any): any;
  _appendXmlElements(doc: any, node: any, property: any, range: any): any;
  _appendXmlArray(doc: any, node: any, property: any, range: any, isWrapped: any): any;
  _xmlProcessUnionScalarProperty(doc: any, node: any, property: any, shape: any): any;
  _normalizeXmlTagName(name: any): any;
  _xmlProcessDataProperty(doc: any, node: any, property: any, name: any): any;
  _computeExampleFromStructuredValue(model: any): any;
  _computeStructuredExampleValue(model: any): any;
  _processDataArrayProperties(doc: any, node: any, property: any, name: any): any;
  _processDataObjectProperties(doc: any, node: any, property: any): any;
  _dataNameFromKey(key: any): any;
}
